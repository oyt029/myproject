

import java.io.FileNotFoundException;
import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.util.ToolRunner;
import org.apache.mahout.cf.taste.hadoop.item.RecommenderJob;
import org.apache.mahout.clustering.conversion.InputDriver;
import org.apache.mahout.clustering.kmeans.KMeansDriver;
import org.apache.mahout.clustering.kmeans.RandomSeedGenerator;
import org.apache.mahout.common.distance.DistanceMeasure;
import org.apache.mahout.common.distance.EuclideanDistanceMeasure;
import org.apache.mahout.utils.clustering.ClusterDumper;

/**
 * ²âmahout org.apache.mahout.cf.taste.hadoop.item.RecommenderJob
 * environment£º 
 * mahout0.9
 * hadoop2.6
 * @author ouyangtao
 *
 */
public class KmeansJob{
  static //RecommenderJob rec = null;

  Configuration conf = new Configuration();
 
//  public void setUp(){
//  //	rec= new RecommenderJob();
//	  Configuration conf = new Configuration();
//    System.out.println("Begin to test...");
//  }
  
 
  public static void main(String args[]) throws Exception{
//    String[] args1 ={
//     "-i","hdfs://192.168.1.169:8020/user/hdfs/item.csv",  
//         "-o","hdfs://192.168.1.169:8020/user/hdfs/rec001",  
//         "-n","3","-b","false","-s","SIMILARITY_EUCLIDEAN_DISTANCE",  
//         "--maxPrefsPerUser","7","--minPrefsPerUser","2",  
//         "--maxPrefsInItemSimilarity","7",  
//         "--outputPathForSimilarityMatrix","hdfs://192.168.1.169:8020/user/hdfs/matrix/rec001",
//         "--tempDir","hdfs://192.168.1.169:8020/user/hdfs/temp/rec001"}; 
    
	String localpath = "/home/hadoop/randomData.csv";  
	String inPath = "hdfs://192.168.1.169:8020/user/hdfs/mixdata02";

    datain(localpath,inPath+"randomData.csv");
    //recommender(filepath,filename);
    //dataout(outFile);
	//cleanUp(filepath);
    
    Kmeans(inPath);
  }
  
  
  
  
  public static void Kmeans(String inPath) throws Exception
  {
	  //String inPath = HDFS + "/user/hdfs/mix_data";
      String seqFile = inPath + "/seqfile";
      String seeds = inPath + "/seeds";
      String outPath = inPath + "/result/";
      String clusteredPoints = outPath + "/clusteredPoints";

	  
	  InputDriver.runJob(new Path(inPath), new Path(seqFile), "org.apache.mahout.math.RandomAccessSparseVector");
	  int k = 3;
      Path seqFilePath = new Path(seqFile);
      Path clustersSeeds = new Path(seeds);
      DistanceMeasure measure = new EuclideanDistanceMeasure();
      clustersSeeds = RandomSeedGenerator.buildRandom(conf, seqFilePath, clustersSeeds, k, measure);
      KMeansDriver.run(conf, seqFilePath, clustersSeeds, new Path(outPath), 0.01, 10, true, 0.01, false);

      Path outGlobPath = new Path(outPath, "clusters-*-final");
      Path clusteredPointsPath = new Path(clusteredPoints);
      System.out.printf("Dumping out clusters from clusters: %s and clusteredPoints: %s\n", outGlobPath, clusteredPointsPath);

      ClusterDumper clusterDumper = new ClusterDumper(outGlobPath, clusteredPointsPath);
      clusterDumper.printClusters(null);

	  
  }
  
  public static void datain(String LocalFilePath,String HdfsFilePath) throws FileNotFoundException, IOException{
	  
	  	hdfsfile hdfs01 = new hdfsfile();
		hdfs01.uploadToHdfs(LocalFilePath, HdfsFilePath);;
	  
  }
  public static void dataout(String filepath) throws IOException{
	    
	    hdfsfile hdfs01 = new hdfsfile();
		hdfs01.cat(filepath);
  }
 
  public static void cleanUp(String path) throws IOException{
	  hdfsfile hdfs02 = new hdfsfile();
	  
	  String outFile1,outFile2,outFile3;
	  outFile1 = path+"temp/";
	  outFile2 = path+"matrix";
	  outFile3 = path+"rec001";
	  hdfs02.rmr(outFile1);
	  hdfs02.rmr(outFile2);
	  hdfs02.rmr(outFile3);
	   System.out.println("clean over...");
	  
    
  }
}
